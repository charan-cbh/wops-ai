import { useEffect, useState } from 'react';
import { 
  CalendarIcon, 
  ChartBarIcon, 
  ArrowTrendingUpIcon,
  LightBulbIcon,
  ClockIcon,
  DocumentTextIcon,
  ArrowPathIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import { APIService } from '../services/api';

interface WeeklyDigest {
  period: {
    start_date: string;
    end_date: string;
    weeks_back: number;
  };
  summary: string;
  key_insights: string[];
  metrics: {
    total_records: number;
    tables_with_data: number;
    top_active_tables: Array<{
      table: string;
      records: number;
    }>;
    data_quality: Record<string, {
      null_percentage: number;
      complete_records: number;
      total_records: number;
    }>;
  };
  trends: {
    productivity_trend: string;
    data_volume_trend: string;
    quality_indicators: Array<{
      metric: string;
      table: string;
      average: number;
      count: number;
    }>;
    notable_changes: string[];
  };
  recommendations: string[];
  data_coverage: Record<string, number>;
  generated_at: string;
  error?: string;
}

export default function WeeklyDigest() {
  const [digest, setDigest] = useState<WeeklyDigest | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedWeeks, setSelectedWeeks] = useState(1);
  const [error, setError] = useState<string | null>(null);
  const [hasLoaded, setHasLoaded] = useState(false);

  useEffect(() => {
    // Only load if we haven't loaded for this week selection or it's the initial load
    if (!hasLoaded || digest?.period?.weeks_back !== selectedWeeks) {
      loadWeeklyDigest();
    }
  }, [selectedWeeks, hasLoaded]);

  const loadWeeklyDigest = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await APIService.getWeeklyDigest(selectedWeeks);
      setDigest(response);
      setHasLoaded(true);
    } catch (err) {
      console.error('Error loading weekly digest:', err);
      setError('Failed to load weekly digest. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const getTrendColor = (trend: string) => {
    switch (trend.toLowerCase()) {
      case 'increasing':
      case 'improving':
      case 'positive':
        return 'text-emerald-600 bg-emerald-100';
      case 'decreasing':
      case 'declining':
      case 'negative':
        return 'text-red-600 bg-red-100';
      default:
        return 'text-blue-600 bg-blue-100';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-center h-64">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-8 shadow-lg border border-white/20">
              <div className="flex items-center space-x-4">
                <div className="relative">
                  <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-200 border-t-blue-600"></div>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <DocumentTextIcon className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
                <div>
                  <p className="text-gray-700 font-medium text-lg">Generating Weekly Digest...</p>
                  <p className="text-gray-500 text-sm">Analyzing your business data</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error || digest?.error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-center h-64">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-8 shadow-lg border border-red-200/50">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-red-100 rounded-xl flex items-center justify-center">
                  <ExclamationTriangleIcon className="h-6 w-6 text-red-600" />
                </div>
                <div>
                  <p className="text-red-700 font-medium text-lg">Unable to Generate Digest</p>
                  <p className="text-red-600 text-sm">{error || digest?.error}</p>
                  <button
                    onClick={loadWeeklyDigest}
                    className="mt-2 text-blue-600 hover:text-blue-800 font-medium text-sm"
                  >
                    Try Again
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!digest) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-600 to-indigo-600 rounded-2xl flex items-center justify-center shadow-lg">
                <DocumentTextIcon className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-700 to-indigo-700 bg-clip-text text-transparent">
                  Weekly Operations Digest
                </h1>
                <p className="text-gray-600 flex items-center">
                  <CalendarIcon className="h-4 w-4 mr-1 text-purple-500" />
                  {formatDate(digest.period.start_date)} - {formatDate(digest.period.end_date)}
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <select
                value={selectedWeeks}
                onChange={(e) => setSelectedWeeks(Number(e.target.value))}
                className="px-4 py-2 bg-white/80 backdrop-blur-sm border border-gray-200/50 rounded-xl text-sm font-medium text-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-500/50"
              >
                <option value={1}>Last Week</option>
                <option value={2}>Last 2 Weeks</option>
                <option value={4}>Last Month</option>
                <option value={12}>Last Quarter</option>
              </select>
              <button
                onClick={loadWeeklyDigest}
                className="px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-xl hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 shadow-lg hover:shadow-xl flex items-center space-x-2"
              >
                <ArrowPathIcon className="h-4 w-4" />
                <span>Refresh</span>
              </button>
            </div>
          </div>
        </div>

        {/* Executive Summary */}
        <div className="mb-8">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-8 shadow-lg">
            <div className="flex items-center space-x-3 mb-6">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <DocumentTextIcon className="h-4 w-4 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-900">Executive Summary</h2>
            </div>
            <p className="text-lg text-gray-700 leading-relaxed">{digest.summary}</p>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-6 shadow-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Records</p>
                <p className="text-3xl font-bold text-gray-900 mt-2">
                  {digest.metrics.total_records.toLocaleString()}
                </p>
                <p className="text-xs text-blue-600 font-medium mt-1">Processed</p>
              </div>
              <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                <ChartBarIcon className="h-6 w-6 text-white" />
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-6 shadow-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Active Sources</p>
                <p className="text-3xl font-bold text-gray-900 mt-2">{digest.metrics.tables_with_data}</p>
                <p className="text-xs text-emerald-600 font-medium mt-1">Data Tables</p>
              </div>
              <div className="w-12 h-12 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg">
                <ArrowTrendingUpIcon className="h-6 w-6 text-white" />
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-6 shadow-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Data Trend</p>
                <p className="text-xl font-bold text-gray-900 mt-2 capitalize">{digest.trends.data_volume_trend}</p>
                <span className={`text-xs font-medium mt-1 px-2 py-1 rounded-full ${getTrendColor(digest.trends.data_volume_trend)}`}>
                  Volume
                </span>
              </div>
              <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                <ArrowTrendingUpIcon className="h-6 w-6 text-white" />
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-6 shadow-lg">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Generated</p>
                <p className="text-lg font-bold text-gray-900 mt-2">
                  {new Date(digest.generated_at).toLocaleTimeString()}
                </p>
                <p className="text-xs text-orange-600 font-medium mt-1">Latest Data</p>
              </div>
              <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
                <ClockIcon className="h-6 w-6 text-white" />
              </div>
            </div>
          </div>
        </div>

        {/* Key Insights */}
        {digest.key_insights && digest.key_insights.length > 0 && (
          <div className="mb-8">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-8 shadow-lg">
              <div className="flex items-center space-x-3 mb-6">
                <div className="w-8 h-8 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-lg flex items-center justify-center">
                  <LightBulbIcon className="h-4 w-4 text-white" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900">Key Insights</h2>
              </div>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {digest.key_insights.map((insight, index) => (
                  <div key={index} className="flex items-start space-x-4 p-4 bg-gradient-to-r from-emerald-50 to-teal-50 rounded-xl border border-emerald-200/50">
                    <div className="w-8 h-8 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-full flex items-center justify-center shadow-sm mt-1">
                      <span className="text-white text-sm font-bold">{index + 1}</span>
                    </div>
                    <p className="text-gray-800 leading-relaxed font-medium">{insight}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Recommendations */}
        {digest.recommendations && digest.recommendations.length > 0 && (
          <div className="mb-8">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-8 shadow-lg">
              <div className="flex items-center space-x-3 mb-6">
                <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                  <LightBulbIcon className="h-4 w-4 text-white" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900">Recommendations</h2>
              </div>
              <div className="space-y-4">
                {digest.recommendations.map((recommendation, index) => (
                  <div key={index} className="flex items-start space-x-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-200/50">
                    <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-sm mt-1">
                      <span className="text-white text-sm font-bold">→</span>
                    </div>
                    <p className="text-gray-800 leading-relaxed font-medium">{recommendation}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Data Coverage & Quality */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Top Active Tables */}
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-6 shadow-lg">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Most Active Data Sources</h3>
            <div className="space-y-3">
              {digest.metrics.top_active_tables.map((table, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50/80 rounded-xl">
                  <span className="font-medium text-gray-900">{table.table}</span>
                  <span className="text-blue-600 font-bold">{table.records.toLocaleString()}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Quality Indicators */}
          {digest.trends.quality_indicators && digest.trends.quality_indicators.length > 0 && (
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 p-6 shadow-lg">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Performance Indicators</h3>
              <div className="space-y-3">
                {digest.trends.quality_indicators.map((indicator, index) => (
                  <div key={index} className="p-3 bg-gray-50/80 rounded-xl">
                    <div className="flex items-center justify-between">
                      <span className="font-medium text-gray-900 text-sm">{indicator.metric}</span>
                      <span className="text-purple-600 font-bold">{indicator.average}</span>
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {indicator.table} • {indicator.count} records
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="text-center text-gray-500 text-sm">
          <p>Digest generated on {new Date(digest.generated_at).toLocaleString()}</p>
          <p className="mt-1">Analyzing {selectedWeeks} week{selectedWeeks > 1 ? 's' : ''} of Worker Operations data</p>
        </div>
      </div>
    </div>
  );
}